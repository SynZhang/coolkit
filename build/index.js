!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.koolkit=t():e.koolkit=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)n.d(r,u,function(t){return e[t]}.bind(null,u));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]});t.__esModule=!0,t.descartes=t.pipe=t.poll=t.partition=t.waitForTime=t.waitForever=void 0,r(t,n(1),"default","waitForever"),r(t,n(2),"default","waitForTime"),r(t,n(3),"default","partition"),r(t,n(4),"default","poll"),r(t,n(5),"default","pipe"),r(t,n(6),"default","descartes")},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(){return new Promise((function(){}))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return new Promise((function(t){return setTimeout(t,e)}))}},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e){return function(t){return t.reduce((function(n,r){switch(e(t)){case!1:return n[0].push(r),n;default:return n[1].push(r),n}}),[[],[]])}}},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e,t,n){var r=Number(new Date)+(t||2e3);n=n||100;var u=function(t,o){var i=e();i?t(i):Number(new Date)<r?setTimeout(u,n,t,o):o(new Error("timed out for "+e+": "+arguments))};return new Promise(u)}},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.reduce((function(e,t){return t(e)}),t)}}},function(e,t,n){"use strict";var r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,u=e.length;n<r;n++,u++)e[u]=t[n];return e};t.__esModule=!0;t.default=function(e){return void 0===e&&(e=[]),e.reduce((function(e,t){return e.flatMap((function(e){return t.map((function(t){return r(r([],e),[t])}))}))}),[[]])}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,